//Importing all the required packages
import java.util.concurrent.locks.*;
import org.apache.thrift.transport.TIOStreamTransport;
import org.apache.thrift.protocol.TJSONProtocol;
import org.apache.thrift.transport.TTransportException;

import org.apache.thrift.TException;
import org.apache.thrift.transport.TSSLTransportFactory;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;

import org.apache.thrift.TException;
import java.util.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.UserPrincipal;

import java.lang.reflect.Field;
import java.lang.*;
import java.io.*;
import java.net.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.*;
import java.util.Map.Entry;
import java.text.*;

import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.security.NoSuchAlgorithmException;
import java.security.MessageDigest;

// Class implementing method stubs generated by thrift
public class BranchHandler implements Branch.Iface, Runnable {
    public static BranchHandler handler;
    public static Branch.Processor processor;
    public static int port;

    public static int balance;
    public static int snapshotBalance;
    public static String branchName;
    public static String branchIP;
    public static int branchPort;
    public static ArrayList<BranchInfo> branchInfoList = new ArrayList<BranchInfo>();
    public static State s = new State(0, new HashMap<String, Channel>());

    public static int numOfBranches;
    public static ArrayList<Integer> balanceList = new ArrayList<Integer>();
    public static HashMap<String, HashMap<Boolean, ArrayList>> channelMap = new HashMap<String, HashMap<Boolean, ArrayList>>();
    public static HashMap<String, Integer> messageIDMap = new HashMap<String, Integer>();

    public static int lastSeenMsgId;
    public static int lastMsgID;
    public static int markerVariable;
    public static boolean flag = true;

    private static final Lock balanceLock = new ReentrantLock();
    private static final Lock messageLock = new ReentrantLock();
    private static final Lock conditionLock = new ReentrantLock();

    private static final Condition isEqual  = conditionLock.newCondition(); 

    private static HashMap <String, Integer> receivedMsgId = new HashMap<String, Integer>();
    private static HashMap <String, Integer> sentMsgId = new HashMap<String, Integer>();

    private static ArrayList<Integer> localMsgs = new ArrayList<Integer>();

    //Constructor
    public BranchHandler() {

    }

    //Paramterized Constructor
    public BranchHandler(String branchName, int branchPort) {
        this.numOfBranches = 1;
        this.branchName = branchName;
        this.branchPort = branchPort;
        this.branchIP = "localhost";
        this.balance = 0;
        this.markerVariable = 1;
        this.s = new State();
        this.localMsgs = new ArrayList<Integer>();
    }

    //Run method of Runnable interface, Calls sendMoney method from separate
    //thread
    public void run ()  {
        while(true) {
            try {
                int rnd = new Random().nextInt(5);
                Thread.sleep(((rnd + 1) * 1000));
                sendMoney();
            } catch (TException te) {
                te.printStackTrace();
            } catch (InterruptedException ie) {
                ie.printStackTrace();
            }
        }
    }

    //Function which initiates all the branches with some initial balance and
    //provides the list of all other branches to the this branch
    public void initBranch(int balance, List <BranchID> all_branches) throws SystemException, org.apache.thrift.TException {
        this.numOfBranches = all_branches.size();
        this.numOfBranches = this.numOfBranches - 1;
        this.balance = balance;
        for(BranchID bi: all_branches) {
            if(!(bi.getName().equals(this.branchName))) {
                this.branchInfoList.add(new BranchInfo(bi.getName(), bi.getIp(), bi.getPort(), 0)); 
                this.sentMsgId.put(bi.getName(), 0);
                this.receivedMsgId.put(bi.getName(), 0);
                this.s.getChannels().put(bi.getName(), new Channel(false, new ArrayList<Integer>()));
            } 
        }
        Thread t1 = new Thread(new BranchHandler());
        t1.start();
    }

    //sendMoeny - This method calls transferMoney
    private void sendMoney() throws SystemException, org.apache.thrift.TException{
        balanceLock.lock();
        int rnd = new Random().nextInt(5);
        TransferMessage tm = new TransferMessage();
        tm.orig_branchId = new BranchID(this.branchName, this.branchIP, this.branchPort);
        tm.amount = ((int)Math.floor(((rnd + 1) * this.balance) / 100));

        this.balance = this.balance - tm.amount;

        int rnd_branch = new Random().nextInt(this.numOfBranches);
        if(!branchInfoList.isEmpty()) {
            openConnectionAndTransferMoney(branchInfoList.get(rnd_branch), tm);
        }

        balanceLock.unlock();
    }

    //Forms a connection for trasferring money
    private void openConnectionAndTransferMoney(BranchInfo bi, TransferMessage tm) {
        try {
            TTransport transport;
            if (numOfBranches != 0) {
                transport = new TSocket(bi.getBranchIP(), bi.getBranchPort());
                transport.open();
            } else {
                TSSLTransportParameters params = new TSSLTransportParameters();
                params.setTrustStore("../../lib/java/test/.truststore", "thrift", "SunX509", "JKS");
                transport = TSSLTransportFactory.getClientSocket(bi.getBranchIP(), bi.getBranchPort(), 0, params);
            }
            TProtocol protocol = new TBinaryProtocol(transport);
            Branch.Client client = new Branch.Client(protocol);
            messageLock.lock();

            int temp = this.sentMsgId.get(bi.getBranchName());
            this.sentMsgId.put(bi.getBranchName(), (temp + 1));
            client.transferMoney(tm, (temp + 1));

            messageLock.unlock();

            transport.close();
        } catch (TException x) {
            x.printStackTrace();
        }
    }

    //transferMoney
    public void transferMoney(TransferMessage message, int messageId) throws SystemException, org.apache.thrift.TException {
        //Delay can be added here to check whether money gets captured in
        //channels
        System.out.println("\nTransfer Money : " + message.getAmount());  
        
        conditionLock.lock();
        try {
            String remoteBranch = message.getOrig_branchId().getName();
            while((messageId - this.receivedMsgId.get(remoteBranch)) > 1) {
                isEqual.await();
            }

            if(this.s.getChannels().get(remoteBranch).getOn() == true) {
                this.s.getChannels().get(remoteBranch).getMessages().add(message.amount);
            }

            this.receivedMsgId.put(remoteBranch, messageId);
            balanceLock.lock();
            this.balance = this.balance + message.amount;
            balanceLock.unlock();
            isEqual.signalAll(); 
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        } finally {
            conditionLock.unlock();
        }
    }

    //initSnapshot method
    public void initSnapshot(int SnapshotId) throws SystemException, org.apache.thrift.TException {
        System.out.println("\nInit Snapshot : " + this.branchName);

        balanceLock.lock();

        this.s.getChannels().clear(); 
        this.s.setBalance(0); 
        for(BranchInfo bi : branchInfoList) {
            this.s.getChannels().put(bi.getBranchName(), new Channel(false, new ArrayList<Integer>())); 
        } 

        this.s.setBalance(this.balance);
        System.out.println(this.s.getBalance());
        balanceLock.unlock();

        this.markerVariable = 2;

        BranchID bid = new BranchID(this.branchName, this.branchIP, this.branchPort);
        for(BranchInfo bi: branchInfoList) {
            this.s.getChannels().get(bi.getBranchName()).setOn(true);
        }

        messageLock.lock();

        for(BranchInfo bi: branchInfoList) {
            sendMarkers(SnapshotId, bi, bid); 
        }

        messageLock.unlock();
    }

    //sendMarkers method
    public void sendMarkers(int snapshotId, BranchInfo bi, BranchID bid) {
        if(!(bi.getBranchName().equals(this.branchName))){
            try {
                TTransport transport;
                if (numOfBranches != 0) {
                    transport = new TSocket(bi.getBranchIP(), bi.getBranchPort());
                    transport.open();
                } else {
                    TSSLTransportParameters params = new TSSLTransportParameters();
                    params.setTrustStore("../../lib/java/test/.truststore", "thrift", "SunX509", "JKS");
                    transport = TSSLTransportFactory.getClientSocket(bi.getBranchIP(), bi.getBranchPort(), 0, params);
                }
                TProtocol protocol = new TBinaryProtocol(transport);
                Branch.Client client = new Branch.Client(protocol);
                int temp = this.sentMsgId.get(bi.getBranchName());
                this.sentMsgId.put(bi.getBranchName(), (temp + 1));
                client.Marker(bid, snapshotId, (temp + 1));
                transport.close();
            } catch (TException x) {
                x.printStackTrace();
            }
        } 
    } 

    //Marker method
    public void Marker(BranchID branchId, int snapshotId, int messageId) throws SystemException, org.apache.thrift.TException {
        //Delay can be added here to capture money into the channels
        conditionLock.lock();
        try {
            String remoteBranch = branchId.getName();
            while((messageId - this.receivedMsgId.get(remoteBranch)) > 1) {
                isEqual.await();
            } 
            this.receivedMsgId.put(remoteBranch, messageId);
            if(this.markerVariable == 1) {
                System.out.println("\n1st Marker " + branchId.getName() + "->" + this.branchName + "->" + messageId);
                this.markerVariable = 2;

                this.s.getChannels().clear(); 
                this.s.setBalance(0); 
                for(BranchInfo bi : branchInfoList) {
                    this.s.getChannels().put(bi.getBranchName(), new Channel(false, new ArrayList<Integer>())); 
                } 

                balanceLock.lock();

                // Saving local state and starting recording on channels
                this.s.setBalance(this.balance);
                System.out.println("BALANCE: " + this.s.getBalance());
                this.s.getChannels().get(remoteBranch).setOn(false);
                this.s.getChannels().get(remoteBranch).setMessages(new ArrayList<Integer>());

                balanceLock.unlock();

                BranchID bid = new BranchID(this.branchName, this.branchIP, this.branchPort);
                new Thread() {
                    public void run () {
                        messageLock.lock();
                        for(BranchInfo bi: branchInfoList) {
                            sendMarkers(snapshotId, bi, bid);
                        }
                        messageLock.unlock();
                    }
                }.start();
            } else {
                System.out.println("\nnth Marker " + branchId.getName() + "->" + this.branchName + "->" + messageId);
                System.out.println("BALANCE: " + this.s.getBalance());
                this.s.getChannels().get(branchId.getName()).setOn(false);
            }
            isEqual.signalAll();
        } catch (InterruptedException ie) {
            ie.printStackTrace();
        }finally {
            conditionLock.unlock();
        }
    }

    //return LocalSnapshot of the branch
    public LocalSnapshot retrieveSnapshot(int snapshotId) throws SystemException, org.apache.thrift.TException {
        System.out.println("\nRetrieve");
        int i = 0;
        int sum = 0;
        this.markerVariable = 1;
        ArrayList<Integer> localMsgs = new ArrayList<Integer>();
        //Adding messages into the list to equal up the total amount
        for(BranchInfo bi : branchInfoList) {
            System.out.print(bi.getBranchName() + " -> " + this.branchName + " -> [ ");
            for(Integer sam: this.s.getChannels().get(bi.getBranchName()).getMessages()) {
                localMsgs.add(sam);
                System.out.print(sam + " ");
            }
            System.out.print(" ]");
        }
        LocalSnapshot l = (new LocalSnapshot(snapshotId, this.s.getBalance(), localMsgs));
        return l; 
    }
}

